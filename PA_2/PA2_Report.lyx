#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble

\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\headheight 0cm
\headsep 0cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CSCE 221 Cover Page
\begin_inset Newline newline
\end_inset

 Program Assignment # 2
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 
\end_layout

\begin_layout Author
First Name:
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Rong
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Last Name: 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Xu
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

UIN:
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

928009312
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Date
User Name: 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Abby-xu
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

E-mail address:
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

rongx0915@tamu.edu
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Quotation
Please list all sources in the table below including web pages which you
 used to solve or implement the current homework.
 If you fail to cite sources you can get a lower number of points or even
 zero, read more in the Aggie Honor System Office 
\begin_inset CommandInset href
LatexCommand href
target "http://aggiehonor.tamu.edu/"
literal "false"

\end_inset


\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type of sources
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
People
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web pages (provide URL)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Printed material
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other Sources
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Date
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Quotation
I certify that I have listed all the sources that I used to develop the
 solutions/code to the submitted work.
\end_layout

\begin_layout Quotation
“
\emph on
On my honor as an Aggie, I have neither given nor received any unauthorized
 help on this academic work.
\emph default
” 
\end_layout

\begin_layout Date
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Your Name (signature)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Rong
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Xu
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2020/10/06
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Title
The Programming Assignment Report Instructions
\begin_inset Newline newline
\end_inset

CSCE 221
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 
\end_layout

\begin_layout Enumerate
The description of an assignment problem.
\end_layout

\begin_deeper
\begin_layout Enumerate
This lab including two parts: 
\end_layout

\begin_deeper
\begin_layout Enumerate
Part one involves implementing a simple Double Linked List and a Double
 Linked List template ADT.
\end_layout

\begin_layout Enumerate
Part two involves writing a simple library manage system of the Double Linked
 list template and write a report.
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
The description of data structures and algorithms used to solve the problem.
\end_layout

\begin_deeper
\begin_layout Enumerate
Provide definitions of data structures by using Abstract Data Types (ADTs)
\end_layout

\begin_deeper
\begin_layout Enumerate
We used double Linked List data structure in this assignment.
 For each node is the list, we use a struct for defining it.
 
\end_layout

\begin_layout Enumerate
For the library manage system, we use a class called record to put the basic
 infomation of each book including title, author, ISBN, year and edtion.
 And we use the Double Linked List template for storing the records, and
 a vector for storing the linked list.
 In the vector, we have 26 elements(the double linked list) which are in
 the Alphabet order.
 
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Write about the ADTs implementation in C++.
\end_layout

\begin_deeper
\begin_layout Enumerate
We used double Linked List data structure in this assignment.
 During the implementation of the double linked list, for each list node,
 it is connected to a front node and a back node by using two pointers previous
 and next.
 A friend class called DDListNode is also implemented, which has three private
 members, hence T obj, prev pointer and next pointer.
 Thwe double linked list class is a list collecting the all DLListNodes.
\end_layout

\begin_layout Enumerate
For the Record class, we have five string private members called title,
 author, ISBN, year and edtion.
 and the get/set functions for these five memebers.
 We also have to overload the operators 
\begin_inset Quotes eld
\end_inset

>>
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

<<
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

==
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
For the Library class, we have store the infomation of each book, then each
 records will be as each node for a double linked list, then we have a vector
 for storing the linked lists.
 
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Describe algorithms used to solve the problem.
\end_layout

\begin_deeper
\begin_layout Enumerate
Double Linked List:
\end_layout

\begin_deeper
\begin_layout Enumerate
insert_before/after
\end_layout

\begin_layout Enumerate
remove_before/after
\end_layout

\begin_layout Enumerate
insert_last/first
\end_layout

\begin_layout Enumerate
remove_last/first
\end_layout

\begin_layout Enumerate
copy/move constructor
\end_layout

\begin_layout Enumerate
copy/move operator
\end_layout

\begin_layout Enumerate
output operator
\end_layout

\end_deeper
\begin_layout Enumerate
Library:
\end_layout

\begin_deeper
\begin_layout Enumerate
import_database
\end_layout

\begin_layout Enumerate
export_database
\end_layout

\begin_layout Enumerate
print_database
\end_layout

\begin_layout Enumerate
add/remove_record
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Analyze the algorithms according to assignment requirements.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Double Linked List:
\end_layout

\begin_deeper
\begin_layout Enumerate
insert_before/after O(1): insert a node before/after a node of the double
 linked list.
 Create a new node; point teh next to where the header pointing to and then
 let teh header pointer pointing to it.
\end_layout

\begin_layout Enumerate
remove_before/after O(1): delete a node before/after a node of the double
 linked list.
\end_layout

\begin_layout Enumerate
insert_last/first O(1): insert a node at the beginning/ending of the double
 linked list.
 Create a new node; point teh next to where the header pointing to and then
 let teh header pointer pointing to it.
\end_layout

\begin_layout Enumerate
remove_last/first O(1): delete a node at the beginning/ ending of the double
 linked list.
\end_layout

\begin_layout Enumerate
copy/move constructor O(n): this function will copy every element in another
 list
\end_layout

\begin_layout Enumerate
copy/move assignment O(n): the function will clear the linked lisit first(O(n)).
 Then copy the whole list from the other list (O(n)).
 O(n) + O(n) = O(n)
\end_layout

\begin_layout Enumerate
output operator O(n): this function will print out every nodes content in
 the linked list.
\end_layout

\end_deeper
\begin_layout Enumerate
Library:
\end_layout

\begin_deeper
\begin_layout Enumerate
import_database O(n): this function will read the records from a txt file
 then store them into the database.
 the number returned is the number of records installed, which is as same
 as n.
\end_layout

\begin_layout Enumerate
export/print_database O(n): this function will export/print the database
 out.
 so basically, it will go over the whole vector (26 elements) and the 26
 linked list.
 and export/print each record out.
\end_layout

\begin_layout Enumerate
add_record: this function is going to add the record into the database.
 //best case: when the title of the record is start 
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

 and in the data base the linked list 
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

, there is no record in the list.
 ==> O(1).//worst case: when the title of the record is start 
\begin_inset Quotes eld
\end_inset

Z
\begin_inset Quotes erd
\end_inset

 and in the database the linked list 
\begin_inset Quotes eld
\end_inset

Z
\begin_inset Quotes erd
\end_inset

, there have the n records.
 ==> 26n for search and n for insert_last function ==> 26n + n = O(n) //average
 case: O(n)
\end_layout

\begin_layout Enumerate
remove record: this function is going to remove one of the record in teh
 database.
 //best case: O(1) //worst case / average case: O(n)
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Enumerate
A C++ organization and implementation of the problem solution 
\end_layout

\begin_deeper
\begin_layout Enumerate
Provide a list and description of classes or interfaces used by a program
 such as classes used to implement the data structures or exceptions.
\begin_inset listings
lstparams "language={C++},basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

<typename T> 
\end_layout

\begin_layout Plain Layout

struct DLListNode {   
\end_layout

\begin_layout Plain Layout

T obj;   
\end_layout

\begin_layout Plain Layout

DLListNode<T> *prev, *next;     
\end_layout

\begin_layout Plain Layout

DLListNode(T e = T(), DLListNode *p = nullptr, DLListNode *n = nullptr);
 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// doubly linked list class 
\end_layout

\begin_layout Plain Layout

template <typename T> 
\end_layout

\begin_layout Plain Layout

class DLList { 
\end_layout

\begin_layout Plain Layout

private:   
\end_layout

\begin_layout Plain Layout

DLListNode<T> header, trailer; 
\end_layout

\begin_layout Plain Layout

public:   
\end_layout

\begin_layout Plain Layout

DLList();// default constructor   
\end_layout

\begin_layout Plain Layout

DLList(const DLList<T>& dll); // copy constructor   
\end_layout

\begin_layout Plain Layout

DLList(DLList<T>&& dll); // move constructor   
\end_layout

\begin_layout Plain Layout

~DLList(); // destructor   
\end_layout

\begin_layout Plain Layout

void clear();   
\end_layout

\begin_layout Plain Layout

DLList<T>& operator=(const DLList<T>& dll); // copy assignment operator
   
\end_layout

\begin_layout Plain Layout

DLList<T>& operator=(DLList<T>&& dll); // move assignment operator   
\end_layout

\begin_layout Plain Layout

// return the pointer to the first node   
\end_layout

\begin_layout Plain Layout

DLListNode<T> *first_node() const { return header.next; }    
\end_layout

\begin_layout Plain Layout

// return the pointer to the trailer   
\end_layout

\begin_layout Plain Layout

const DLListNode<T> *after_last_node() const { return &trailer; }   
\end_layout

\begin_layout Plain Layout

// return if the list is empty   
\end_layout

\begin_layout Plain Layout

bool is_empty() const { return header.next == &trailer; }   
\end_layout

\begin_layout Plain Layout

T first() const; // return the first object   
\end_layout

\begin_layout Plain Layout

T last() const; // return the last object   
\end_layout

\begin_layout Plain Layout

void insert_first(T obj); // insert to the first node   
\end_layout

\begin_layout Plain Layout

T remove_first(); // remove the first node   
\end_layout

\begin_layout Plain Layout

void insert_last(T obj); // insert to the last node   
\end_layout

\begin_layout Plain Layout

T remove_last(); // remove the last node   
\end_layout

\begin_layout Plain Layout

void insert_after(DLListNode<T> &p, T obj);   
\end_layout

\begin_layout Plain Layout

void insert_before(DLListNode<T> &p, T obj);   
\end_layout

\begin_layout Plain Layout

T remove_after(DLListNode<T> &p);   
\end_layout

\begin_layout Plain Layout

T remove_before(DLListNode<T> &p); 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\begin_inset listings
lstparams "language={C++},basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

class Record { 
\end_layout

\begin_layout Plain Layout

private:     
\end_layout

\begin_layout Plain Layout

//member variables     
\end_layout

\begin_layout Plain Layout

std::string title, author, ISBN, year, edition; 
\end_layout

\begin_layout Plain Layout

public:     
\end_layout

\begin_layout Plain Layout

    void set_title(std::string a);     
\end_layout

\begin_layout Plain Layout

std::string get_title()const;
\end_layout

\begin_layout Plain Layout

	void set_author(std::string a); 	
\end_layout

\begin_layout Plain Layout

std::string get_author()const;
\end_layout

\begin_layout Plain Layout

	void set_ISBN(std::string a); 	
\end_layout

\begin_layout Plain Layout

std::string get_ISBN()const;
\end_layout

\begin_layout Plain Layout

	void set_year(std::string a); 	
\end_layout

\begin_layout Plain Layout

std::string get_year()const;
\end_layout

\begin_layout Plain Layout

	void set_edition(std::string a); 	
\end_layout

\begin_layout Plain Layout

std::string get_edition()const; 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\begin_inset listings
lstparams "language={C++},basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

class Library {     
\end_layout

\begin_layout Plain Layout

public:         
\end_layout

\begin_layout Plain Layout

//Searches for a title in the database and returns vector of matching records
         
\end_layout

\begin_layout Plain Layout

std::vector<Record> search(std::string title);
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

//Imports records from a file.
  Does not import duplicates.
         
\end_layout

\begin_layout Plain Layout

// Return the number of records added to the database         
\end_layout

\begin_layout Plain Layout

int import_database(std::string filename);
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

//Exports the current database to a file         
\end_layout

\begin_layout Plain Layout

//Return the number of records exported         
\end_layout

\begin_layout Plain Layout

int export_database(std::string filename);
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

void print_database();
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

//add record to database, avoid complete duplicates         
\end_layout

\begin_layout Plain Layout

bool add_record(Record book);
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

//Deletes a record from the database         
\end_layout

\begin_layout Plain Layout

void remove_record(Record book);
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

//Prompts user for yes or no and returns choice Y or N         
\end_layout

\begin_layout Plain Layout

char prompt_yes_no();
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

//Given a vector of menu options returns index of choice         
\end_layout

\begin_layout Plain Layout

int prompt_menu(std::vector<std::string>);
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

//Prompts user for a new record         
\end_layout

\begin_layout Plain Layout

Record prompt_record();
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

//Prompt for a valid title         
\end_layout

\begin_layout Plain Layout

std::string prompt_title();
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

// Prompt for a valid string         
\end_layout

\begin_layout Plain Layout

std::string prompt_string(std::string prompt);     
\end_layout

\begin_layout Plain Layout

private:         
\end_layout

\begin_layout Plain Layout

std::vector<DLList<Record>> book_db = vector<DLList<Record>>(26); };
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Include in the report the class declarations from a header file (.h) and
 their implementation from a source file (.cpp).
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Templated Double Linked List
\begin_inset listings
lstparams "language={C++},basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

#include "TemplatedDLList.h"
\end_layout

\begin_layout Plain Layout

template <typename T>
\end_layout

\begin_layout Plain Layout

DLList::DLList() : header(T()), trailer(T()) { 	
\end_layout

\begin_layout Plain Layout

header.next = &trailer; 	
\end_layout

\begin_layout Plain Layout

trailer.prev = &header; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

DLList::DLList(const DLList<T>& dll) { 	
\end_layout

\begin_layout Plain Layout

header.next = &trailer; 	
\end_layout

\begin_layout Plain Layout

trailer.prev = &header; 	
\end_layout

\begin_layout Plain Layout

for (DLListNode* n = dll.first_node(); n != dll.after_last_node(); n = n ->
 next) 		
\end_layout

\begin_layout Plain Layout

this -> insert_last(n -> obj); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

DLList::DLList(DLList<T>&& dll) { 	
\end_layout

\begin_layout Plain Layout

if (dll.is_empty()) { 		
\end_layout

\begin_layout Plain Layout

header.next = &trailer; 		
\end_layout

\begin_layout Plain Layout

trailer.prev = &header; 	
\end_layout

\begin_layout Plain Layout

} else { 		
\end_layout

\begin_layout Plain Layout

header.next = dll.first_node(); 		
\end_layout

\begin_layout Plain Layout

trailer.prev = dll.trailer.prev; 		
\end_layout

\begin_layout Plain Layout

dll.header.next = &dll.trailer; 		
\end_layout

\begin_layout Plain Layout

dll.trailer.prev = &dll.header; 		
\end_layout

\begin_layout Plain Layout

header.next -> prev = &header; 		
\end_layout

\begin_layout Plain Layout

trailer.prev -> next = &trailer; 	
\end_layout

\begin_layout Plain Layout

} }
\end_layout

\begin_layout Plain Layout

DLList::~DLList() { clear(); }
\end_layout

\begin_layout Plain Layout

DLList<T>& DLList::operator=(const DLList<T>& dll) {     
\end_layout

\begin_layout Plain Layout

if(this == &dll)     	
\end_layout

\begin_layout Plain Layout

return *this;     
\end_layout

\begin_layout Plain Layout

header.next = &trailer;     
\end_layout

\begin_layout Plain Layout

trailer.prev = &header;     
\end_layout

\begin_layout Plain Layout

DLListNode<T> *temp_node = dll.header.next;     
\end_layout

\begin_layout Plain Layout

while(temp_node != dll.trailer.prev){ 		
\end_layout

\begin_layout Plain Layout

this -> insert_last(temp_node->obj); 		
\end_layout

\begin_layout Plain Layout

temp_node = temp_node ->next;     
\end_layout

\begin_layout Plain Layout

}     
\end_layout

\begin_layout Plain Layout

this -> insert_last(temp_node->obj); 	
\end_layout

\begin_layout Plain Layout

return *this; } 
\end_layout

\begin_layout Plain Layout

DLList<T>& DLList::operator=(DLList<T>&& dll) {     
\end_layout

\begin_layout Plain Layout

if (this != &dll) { 	
\end_layout

\begin_layout Plain Layout

if (dll.is_empty()) { 		
\end_layout

\begin_layout Plain Layout

header.next = &trailer; 		
\end_layout

\begin_layout Plain Layout

trailer.prev = &header; 	
\end_layout

\begin_layout Plain Layout

} else { 		
\end_layout

\begin_layout Plain Layout

header.next = dll.first_node(); 		
\end_layout

\begin_layout Plain Layout

trailer.prev = dll.trailer.prev; 		
\end_layout

\begin_layout Plain Layout

dll.header.next = &dll.trailer; 		
\end_layout

\begin_layout Plain Layout

dll.trailer.prev = &dll.header; 		
\end_layout

\begin_layout Plain Layout

header.next -> prev = &header; 		
\end_layout

\begin_layout Plain Layout

trailer.prev -> next = &trailer; 	
\end_layout

\begin_layout Plain Layout

}}
\end_layout

\begin_layout Plain Layout

void DLList::clear() {     
\end_layout

\begin_layout Plain Layout

DLListNode<T> *nextNode = header.next;     
\end_layout

\begin_layout Plain Layout

while (nextNode != &trailer) { 		
\end_layout

\begin_layout Plain Layout

nextNode = nextNode->next; 		
\end_layout

\begin_layout Plain Layout

delete header.next; 		
\end_layout

\begin_layout Plain Layout

header.next = nextNode;     
\end_layout

\begin_layout Plain Layout

}     
\end_layout

\begin_layout Plain Layout

header.next = &trailer;     
\end_layout

\begin_layout Plain Layout

trailer.prev = &header; }
\end_layout

\begin_layout Plain Layout

T DLList::first() const { return header.next -> obj; }
\end_layout

\begin_layout Plain Layout

T DLList::last() const { return trailer.prev -> obj; }
\end_layout

\begin_layout Plain Layout

void DLList::insert_first(T obj) { 	
\end_layout

\begin_layout Plain Layout

DLListNode* n = new DLListNode(obj); 	
\end_layout

\begin_layout Plain Layout

DLListNode* temp = header.next; 	
\end_layout

\begin_layout Plain Layout

header.next = n; 	
\end_layout

\begin_layout Plain Layout

n -> prev = &header; 	
\end_layout

\begin_layout Plain Layout

n -> next = temp; 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

T DLList::remove_first() { 	
\end_layout

\begin_layout Plain Layout

if (is_empty()) 		
\end_layout

\begin_layout Plain Layout

throw("The LinkedList is empty..."); 	
\end_layout

\begin_layout Plain Layout

DLListNode* temp = header.next; 	
\end_layout

\begin_layout Plain Layout

T data = temp -> obj; 	
\end_layout

\begin_layout Plain Layout

header.next = temp -> next; 	
\end_layout

\begin_layout Plain Layout

temp -> next -> prev = &header; 
\end_layout

\begin_layout Plain Layout

delete temp; 	
\end_layout

\begin_layout Plain Layout

return data; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

void DLList::insert_last(T obj){ 	
\end_layout

\begin_layout Plain Layout

DLListNode* n = new DLListNode(obj, trailer.prev, &trailer); 	
\end_layout

\begin_layout Plain Layout

trailer.prev -> next = n; 	
\end_layout

\begin_layout Plain Layout

trailer.prev = n; }
\end_layout

\begin_layout Plain Layout

T DLList::remove_last() { 	
\end_layout

\begin_layout Plain Layout

if (is_empty()) 		
\end_layout

\begin_layout Plain Layout

throw("The LinkedList is empty..."); 	
\end_layout

\begin_layout Plain Layout

DLListNode* temp = trailer.prev; 	
\end_layout

\begin_layout Plain Layout

T data = temp -> obj; 	
\end_layout

\begin_layout Plain Layout

trailer.prev = temp -> prev; 	
\end_layout

\begin_layout Plain Layout

temp -> prev -> next = &trailer; 	
\end_layout

\begin_layout Plain Layout

delete temp; 	
\end_layout

\begin_layout Plain Layout

return data; }
\end_layout

\begin_layout Plain Layout

void DLList::insert_after(DLListNode<T> &p, T obj) {     
\end_layout

\begin_layout Plain Layout

DLListNode<T>* n = new DLListNode<T>(obj, &p, p.next);     
\end_layout

\begin_layout Plain Layout

p.next -> prev = n;     
\end_layout

\begin_layout Plain Layout

p.next = n; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

void DLList::insert_before(DLListNode<T> &p, T obj) {     
\end_layout

\begin_layout Plain Layout

DLListNode<T>* n = new DLListNode<T>(obj, p.prev, &p);     
\end_layout

\begin_layout Plain Layout

p.prev -> next = n;     
\end_layout

\begin_layout Plain Layout

p.prev = n; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

T DLList::remove_after(DLListNode<T> &p) {     
\end_layout

\begin_layout Plain Layout

if (p.next == &trailer || is_empty())     	
\end_layout

\begin_layout Plain Layout

throw("The LinkedList is empty...");     
\end_layout

\begin_layout Plain Layout

DLListNode<T>* temp = p.next;     
\end_layout

\begin_layout Plain Layout

T data = temp -> obj;     
\end_layout

\begin_layout Plain Layout

temp -> prev -> next = temp -> next;     
\end_layout

\begin_layout Plain Layout

temp -> next -> prev = temp -> prev;     
\end_layout

\begin_layout Plain Layout

delete temp;     
\end_layout

\begin_layout Plain Layout

return data; 	 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

T DLList::remove_before(DLListNode<T> &p) { 	
\end_layout

\begin_layout Plain Layout

if (is_empty()) 		
\end_layout

\begin_layout Plain Layout

throw("The LinkedList is empty..."); 	
\end_layout

\begin_layout Plain Layout

DLListNode<T>* temp = p.prev; 	
\end_layout

\begin_layout Plain Layout

T data = temp -> obj; 	
\end_layout

\begin_layout Plain Layout

p.prev = temp -> prev; 	
\end_layout

\begin_layout Plain Layout

temp -> prev -> next = &p; 	
\end_layout

\begin_layout Plain Layout

delete temp; 	
\end_layout

\begin_layout Plain Layout

return data; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

ostream& operator<<(ostream& out, const DLList& dll){ 	
\end_layout

\begin_layout Plain Layout

DLListNode<T> *temp = dll.first_node(); 	
\end_layout

\begin_layout Plain Layout

while(temp != dll.after_last_node()){ 		
\end_layout

\begin_layout Plain Layout

out << temp -> obj << ", "; 		
\end_layout

\begin_layout Plain Layout

temp = temp -> next; 	} 	
\end_layout

\begin_layout Plain Layout

return out; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Record
\begin_inset listings
lstparams "language={C++},basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

void Record::set_title(std::string a) {this -> title = a;} 
\end_layout

\begin_layout Plain Layout

std::string Record::get_title()const {return title;}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void Record::set_author(std::string a) {this -> author = a;} 
\end_layout

\begin_layout Plain Layout

std::string Record::get_author()const {return author;}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void Record::set_ISBN(std::string a) {this -> ISBN = a;} 
\end_layout

\begin_layout Plain Layout

std::string Record::get_ISBN()const {return ISBN;}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void Record::set_year(std::string a) {this -> year = a;} 
\end_layout

\begin_layout Plain Layout

std::string Record::get_year()const {return year;}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void Record::set_edition(std::string a) {this -> edition = a;} 
\end_layout

\begin_layout Plain Layout

std::string Record::get_edition()const {return edition;}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Stream operators std::istream& operator>>(std::istream& is, Record& rec)
 { 	
\end_layout

\begin_layout Plain Layout

std::string Blank, Title, Author, ISBN, Year, Edition; 	
\end_layout

\begin_layout Plain Layout

getline(is, Blank, '
\backslash
n'); 	
\end_layout

\begin_layout Plain Layout

getline(is,Title, '
\backslash
n'); rec.set_title(Title); 	
\end_layout

\begin_layout Plain Layout

getline(is,Author, '
\backslash
n'); rec.set_author(Author); 	
\end_layout

\begin_layout Plain Layout

getline(is,ISBN, '
\backslash
n'); rec.set_ISBN(ISBN); 	
\end_layout

\begin_layout Plain Layout

getline(is,Year, '
\backslash
n'); rec.set_year(Year); 	
\end_layout

\begin_layout Plain Layout

getline(is,Edition, '
\backslash
n'); rec.set_edition(Edition); 	
\end_layout

\begin_layout Plain Layout

return is; 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

std::ostream& operator<<(std::ostream& os, Record& rec) { 	
\end_layout

\begin_layout Plain Layout

os << rec.get_title() << std::endl; 	
\end_layout

\begin_layout Plain Layout

os << rec.get_author() << std::endl; 	
\end_layout

\begin_layout Plain Layout

os << rec.get_ISBN() << std::endl; 	
\end_layout

\begin_layout Plain Layout

os << rec.get_year() << std::endl; 	
\end_layout

\begin_layout Plain Layout

os << rec.get_edition() << std::endl; 	
\end_layout

\begin_layout Plain Layout

return os; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

// Comparison operators 
\end_layout

\begin_layout Plain Layout

bool operator==(const Record& r1, const Record& r2) { 	
\end_layout

\begin_layout Plain Layout

return (r1.get_title() == r2.get_title() && 
\end_layout

\begin_layout Plain Layout

r1.get_author() == r2.get_author() && 		
\end_layout

\begin_layout Plain Layout

r1.get_ISBN() == r2.get_ISBN() && 
\end_layout

\begin_layout Plain Layout

r1.get_year() == r2.get_year() && 
\end_layout

\begin_layout Plain Layout

r1.get_edition() == r2.get_edition()); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Library
\begin_inset listings
lstparams "language={C++},basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

#include "Library.h" 
\end_layout

\begin_layout Plain Layout

#include "TemplatedDLList.h" 
\end_layout

\begin_layout Plain Layout

#include <fstream> 
\end_layout

\begin_layout Plain Layout

#include <string>
\end_layout

\begin_layout Plain Layout

using namespace std;
\end_layout

\begin_layout Plain Layout

//Searches for a title in the database and returns vector of matching records
 std::vector<Record> 
\end_layout

\begin_layout Plain Layout

Library::search(std::string title) { 	vector<Record> temp; 	
\end_layout

\begin_layout Plain Layout

int index = title[0] - 'A'; 	
\end_layout

\begin_layout Plain Layout

if(index < 0 || index > 25) 		
\end_layout

\begin_layout Plain Layout

return temp; 	
\end_layout

\begin_layout Plain Layout

else if(book_db.at(index).is_empty()) 		
\end_layout

\begin_layout Plain Layout

return temp; 	
\end_layout

\begin_layout Plain Layout

else { 		
\end_layout

\begin_layout Plain Layout

DLListNode<Record>* n = book_db.at(index).first_node(); 		
\end_layout

\begin_layout Plain Layout

while (n != book_db.at(index).after_last_node()) { 			
\end_layout

\begin_layout Plain Layout

if(title == n -> obj.get_title()) 				
\end_layout

\begin_layout Plain Layout

temp.push_back(n -> obj); 			
\end_layout

\begin_layout Plain Layout

n = n -> next; 		
\end_layout

\begin_layout Plain Layout

} 	} 	
\end_layout

\begin_layout Plain Layout

return temp; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

//Imports records from a file.
  Does not import duplicates.
 
\end_layout

\begin_layout Plain Layout

// Return the number of records added to the database int Library::import_databa
se(std::string filename) { 	
\end_layout

\begin_layout Plain Layout

string title, author, ISBN, year, edition; 	
\end_layout

\begin_layout Plain Layout

int num = 0; 	
\end_layout

\begin_layout Plain Layout

std::ifstream inFS(filename); 	
\end_layout

\begin_layout Plain Layout

Record temp; 	
\end_layout

\begin_layout Plain Layout

while(inFS >> temp) { 		
\end_layout

\begin_layout Plain Layout

if (add_record(temp)) { 			
\end_layout

\begin_layout Plain Layout

int index = temp.get_title()[0] - 'A'; 			
\end_layout

\begin_layout Plain Layout

book_db.at(index).insert_last(temp); 			
\end_layout

\begin_layout Plain Layout

num += 1; 		
\end_layout

\begin_layout Plain Layout

} } 	
\end_layout

\begin_layout Plain Layout

inFS.close(); 	
\end_layout

\begin_layout Plain Layout

return num; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

//Exports the current database to a file 
\end_layout

\begin_layout Plain Layout

//Return the number of records exported int Library::export_database(std::string
 filename) { 	
\end_layout

\begin_layout Plain Layout

int num = 0; 	
\end_layout

\begin_layout Plain Layout

std::ofstream outFS (filename); 	
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < 26; i++) { 		
\end_layout

\begin_layout Plain Layout

DLListNode<Record>* n = book_db.at(i).first_node(); 		
\end_layout

\begin_layout Plain Layout

while (n != book_db.at(i).after_last_node()) { 			
\end_layout

\begin_layout Plain Layout

outFS << n -> obj; 			
\end_layout

\begin_layout Plain Layout

num += 1; 			
\end_layout

\begin_layout Plain Layout

n = n -> next; 		
\end_layout

\begin_layout Plain Layout

}} 	
\end_layout

\begin_layout Plain Layout

outFS.close(); 	
\end_layout

\begin_layout Plain Layout

return num; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

void Library::print_database() { 	
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < 26; i++) {         
\end_layout

\begin_layout Plain Layout

DLListNode<Record>* header_node = book_db.at(i).first_node();         
\end_layout

\begin_layout Plain Layout

while(header_node != book_db.at(i).after_last_node()){             
\end_layout

\begin_layout Plain Layout

cout << header_node -> obj << endl;             
\end_layout

\begin_layout Plain Layout

header_node = header_node -> next; 		
\end_layout

\begin_layout Plain Layout

} } }
\end_layout

\begin_layout Plain Layout

//add record to database, avoid complete duplicates bool Library::add_record(Rec
ord book) { 	
\end_layout

\begin_layout Plain Layout

vector<Record> search_result;     
\end_layout

\begin_layout Plain Layout

search_result = search(book.get_title()); 	
\end_layout

\begin_layout Plain Layout

int index = book.get_title()[0] - 'A';     
\end_layout

\begin_layout Plain Layout

if(search_result.size() == 0 && index < 25 && index > 0) {     	
\end_layout

\begin_layout Plain Layout

book_db.at(index).insert_last(book); 		
\end_layout

\begin_layout Plain Layout

return true;    
\end_layout

\begin_layout Plain Layout

}     
\end_layout

\begin_layout Plain Layout

return false; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

//Deletes a record from the database 
\end_layout

\begin_layout Plain Layout

void Library::remove_record(Record book) { 	
\end_layout

\begin_layout Plain Layout

int index = book.get_title()[0] - 'A'; 	
\end_layout

\begin_layout Plain Layout

DLListNode<Record>* n = book_db.at(index).first_node(); 	
\end_layout

\begin_layout Plain Layout

while(n != book_db.at(index).after_last_node() -> prev) { 		
\end_layout

\begin_layout Plain Layout

if (book.get_title() == n -> obj.get_title()) { 			
\end_layout

\begin_layout Plain Layout

n = n -> next; 			
\end_layout

\begin_layout Plain Layout

book_db[index].remove_before(*n); 			
\end_layout

\begin_layout Plain Layout

break; 		
\end_layout

\begin_layout Plain Layout

} 		
\end_layout

\begin_layout Plain Layout

n = n -> next; 	
\end_layout

\begin_layout Plain Layout

} }
\end_layout

\begin_layout Plain Layout

//Prompts user for yes or no and returns choice Y or N char Library::prompt_yes_
no() { 	
\end_layout

\begin_layout Plain Layout

cout << "Please Enter Y/N" << endl; 	
\end_layout

\begin_layout Plain Layout

char if_prompt; 	
\end_layout

\begin_layout Plain Layout

cin >> if_prompt; 	
\end_layout

\begin_layout Plain Layout

return if_prompt; } 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//Given a vector of menu options returns index of choice int Library::prompt_men
u(std::vector<std::string> a) { 	
\end_layout

\begin_layout Plain Layout

cout << "Please select an option" << endl; 	
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < a.size(); i++) 		
\end_layout

\begin_layout Plain Layout

cout << i + 1 << ".
 " << a.at(i) << endl; 	
\end_layout

\begin_layout Plain Layout

int b; 	
\end_layout

\begin_layout Plain Layout

cin >> b; 	
\end_layout

\begin_layout Plain Layout

return b - 1; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

//Prompts user for a new record Record Library::prompt_record() { 	Record
 new_record; 	
\end_layout

\begin_layout Plain Layout

cin.ignore(); 	
\end_layout

\begin_layout Plain Layout

cout << "
\backslash
n Please enter the author:" << endl; 	
\end_layout

\begin_layout Plain Layout

std::string author; getline(cin,author); 
\end_layout

\begin_layout Plain Layout

new_record.set_author(author); 	
\end_layout

\begin_layout Plain Layout

cout << "
\backslash
n Please enter the ISBN:" << endl; 	
\end_layout

\begin_layout Plain Layout

std::string ISBN; getline(cin,ISBN); new_record.set_ISBN(ISBN); 	
\end_layout

\begin_layout Plain Layout

cout << "
\backslash
n Please enter the year:" << endl; 	
\end_layout

\begin_layout Plain Layout

std::string year; getline(cin,year); new_record.set_year(year); 	
\end_layout

\begin_layout Plain Layout

cout << "
\backslash
n Please enter the edition:" << endl; 	
\end_layout

\begin_layout Plain Layout

std::string edition; getline(cin,edition); 
\end_layout

\begin_layout Plain Layout

new_record.set_edition(edition); 	
\end_layout

\begin_layout Plain Layout

return new_record;  }
\end_layout

\begin_layout Plain Layout

//Prompt for a valid title std::string Library::prompt_title() { 	
\end_layout

\begin_layout Plain Layout

std::string prompt_title;     
\end_layout

\begin_layout Plain Layout

getline(cin, prompt_title); 	
\end_layout

\begin_layout Plain Layout

return prompt_title; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

// Prompt for a valid string std::string Library::prompt_string(std::string
 prompt) { 	
\end_layout

\begin_layout Plain Layout

cout << prompt << endl; 	
\end_layout

\begin_layout Plain Layout

std::string usr_input; 	
\end_layout

\begin_layout Plain Layout

getline(cin, usr_input); 	
\end_layout

\begin_layout Plain Layout

return usr_input; }
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Provide features of the C++ programming paradigms like Inheritance or Polymorphi
sm in case of object oriented programming, or Templates in the case of generic
 programming used in your implementati
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Graphics
	filename /Users/abby/Desktop/Screen Shot 2020-10-07 at 4.39.27 PM.png
	scale 20

\end_inset

 
\end_layout

\begin_layout Enumerate
\begin_inset Graphics
	filename /Users/abby/Desktop/Screen Shot 2020-10-07 at 4.40.58 PM.png
	scale 20

\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
A user guide description how to navigate your program with the instructions
 how to: 
\end_layout

\begin_deeper
\begin_layout Enumerate
compile the program: specify the directory and file names, etc.
\begin_inset listings
lstparams "language=make,basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

run-lib: Library-main.o Library.o Record.o 	
\end_layout

\begin_layout Plain Layout

c++ -g -std=c++11 Library-main.o Library.o Record.o -o run-lib
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Library.o: Library.cpp Library.h Record.h TemplatedDLList.h 	
\end_layout

\begin_layout Plain Layout

c++ -g -std=c++11 -c Library.cpp
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Library-main.o: Library-main.cpp Library.h Record.h 	
\end_layout

\begin_layout Plain Layout

c++ -g -std=c++11 -c Library-main.cpp
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Record.o: Record.cpp Record.h 	
\end_layout

\begin_layout Plain Layout

c++ -g -std=c++11 -c Record.cpp
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DLList.o: DLList.cpp DLList.h 	
\end_layout

\begin_layout Plain Layout

c++ -g -std=c++11 -c DLList.cpp
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DLList-main.o: DLList-main.cpp DLList.h 	
\end_layout

\begin_layout Plain Layout

c++ -g -std=c++11 -c DLList-main.cpp
\end_layout

\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Enumerate
run the program: specify the name of an executable file.
 
\begin_inset listings
lstparams "language=make,basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

» cd ./PA_2/PA2Handout2/StarterCode/DLList
\end_layout

\begin_layout Plain Layout

» make clean 
\end_layout

\begin_layout Plain Layout

» make
\end_layout

\begin_layout Plain Layout

» ./run-dll 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

» cd ./PA_2/PA2Handout2/StarterCode/Record
\end_layout

\begin_layout Plain Layout

» make clean 
\end_layout

\begin_layout Plain Layout

» make
\end_layout

\begin_layout Plain Layout

» ./record
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

» cd ./PA_2/PA2Handout2/StarterCode/Library
\end_layout

\begin_layout Plain Layout

» make clean 
\end_layout

\begin_layout Plain Layout

» make
\end_layout

\begin_layout Plain Layout

» ./
\end_layout

\end_inset


\begin_inset VSpace vfill
\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Specifications and description of input and output formats and files 
\end_layout

\begin_deeper
\begin_layout Enumerate
The type of files: keyboard, text files, etc (if applicable).
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Input file: .txt file
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
A file input format: when a program requires a sequence of input items,
 specify the number of items per line or a line termination.
 Provide a sample of a required input format.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Input file: input file should be an .txt file which have the format like
 this:
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

Harry Potter And The Chamber Of Secrets 
\end_layout

\begin_layout Plain Layout

J.
 K.
 Rowling 
\end_layout

\begin_layout Plain Layout

978-0439064873 
\end_layout

\begin_layout Plain Layout

2000 
\end_layout

\begin_layout Plain Layout

1st edition
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

H is for Hawk 
\end_layout

\begin_layout Plain Layout

Helen Macdonald 
\end_layout

\begin_layout Plain Layout

978-0802123411 
\end_layout

\begin_layout Plain Layout

2015 
\end_layout

\begin_layout Plain Layout

1st edition
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Harry Potter and the Cursed Child 
\end_layout

\begin_layout Plain Layout

J.
 K.
 Rowling 
\end_layout

\begin_layout Plain Layout

978-1338099133
\end_layout

\begin_layout Plain Layout

2016 
\end_layout

\begin_layout Plain Layout

1st edition 
\end_layout

\end_inset

The format is required, the first line is the title of the book; second
 line is the author of the book; the third line is the ISBN; the forth line
 is the publish year; and the last line is the number of edition.
\end_layout

\begin_layout Enumerate
The first letter of title should use upper case.
\end_layout

\begin_layout Enumerate
The search keywork is case sensitive.
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Discuss possible cases when your program could crash because of incorrect
 input (a wrong file name, strings instead of a number, or such cases when
 the program expects 10 items to read and it finds only 9.)
\end_layout

\begin_deeper
\begin_layout Enumerate
none, if the program cannot open the input file, it will throw an exception
 and exit.
\end_layout

\begin_layout Enumerate
no special case.
\end_layout

\begin_layout Enumerate
The first elementt of the title of a book cannot be number.
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Provide types of exceptions and their purpose in your program.
\end_layout

\begin_deeper
\begin_layout Enumerate
logical exceptions (such as deletion of an item from an empty container,
 etc.).
\end_layout

\begin_deeper
\begin_layout Enumerate
No logical error has been found in testing
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
runtime exception (such as division by 
\begin_inset Formula $0$
\end_inset

, etc.)
\end_layout

\begin_deeper
\begin_layout Enumerate
cannot open the .txt file that need to be imported.
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Test your program for correctness using valid, invalid, and random inputs
 (e.g., insertion of an item at the beginning, at the end, or at a random
 place into a sorted vector).
 Include evidence of your testing, such as an output file or screen shots
 with an input and the corresponding outpu
\end_layout

\begin_deeper
\begin_layout Enumerate
Invalid inputs were tested.
 The title with same string was tested.
\end_layout

\begin_layout Enumerate
Wrong input file name teasted.
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_body
\end_document
