#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble

\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\headheight 0cm
\headsep 0cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CSCE 221 Cover Page
\begin_inset Newline newline
\end_inset

 Program Assignment # 2
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 
\end_layout

\begin_layout Author
First Name:
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Rong
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Last Name: 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Xu
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

UIN:
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

928009312
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Date
User Name: 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Abby-xu
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

E-mail address:
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

rongx0915@tamu.edu
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Quotation
Please list all sources in the table below including web pages which you
 used to solve or implement the current homework.
 If you fail to cite sources you can get a lower number of points or even
 zero, read more in the Aggie Honor System Office 
\begin_inset CommandInset href
LatexCommand href
target "http://aggiehonor.tamu.edu/"
literal "false"

\end_inset


\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type of sources
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
People
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web pages (provide URL)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Printed material
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other Sources
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Date
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Quotation
I certify that I have listed all the sources that I used to develop the
 solutions/code to the submitted work.
\end_layout

\begin_layout Quotation
“
\emph on
On my honor as an Aggie, I have neither given nor received any unauthorized
 help on this academic work.
\emph default
” 
\end_layout

\begin_layout Date
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Your Name (signature)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Rong
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Xu
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2020/10/020
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Title
The Programming Assignment Report Instructions
\begin_inset Newline newline
\end_inset

CSCE 221
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 
\end_layout

\begin_layout Enumerate
The description of an assignment problem.
\end_layout

\begin_deeper
\begin_layout Enumerate
The objective of this assignment is to create a Binary Search Tree.
 In doing this students learn how to create a Binary Search Tree, learn
 about recursive functions, and learn how to implement recursive functions
 to do various tasks.
 This program includes the functions for creating a Ninary Search Tree,
 calculationg a average search time for each node, inserting and removing
 a node, and printing the tree out.
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
The description of data structures and algorithms used to solve the problem.
\end_layout

\begin_deeper
\begin_layout Enumerate
Provide definitions of data structures by using Abstract Data Types (ADTs)
\end_layout

\begin_deeper
\begin_layout Enumerate
The data structure I used in this assignment is Binary Tree.
 During the implementation of the tree, I degined a struct to defined each
 binary node, it has two pointers point to the ledt and right.
 Also, each node has a integer value and a search time.
 The BinarySearchTree class is a friend class of the BinaryNode, which has
 all the functions that are called in the main function.
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Write about the ADTs implementation in C++.
\end_layout

\begin_deeper
\begin_layout Enumerate
We implement the Binary Tree.
 So for the binary node we define a struct called Node.
 Each Node stores two integers which are the value and the search time related
 to the height, and two pointers that are point to the left child noe and
 right child node.
\end_layout

\begin_layout Enumerate
For the binary dearch tree, for the private members we have a node pointer
 which is the root of the tree, and the size of the tree itself, which is
 how many nodes the tree has.
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Describe algorithms used to solve the problem.
\end_layout

\begin_deeper
\begin_layout Enumerate
Binary Tree:
\end_layout

\begin_deeper
\begin_layout Enumerate
delete tree
\end_layout

\begin_layout Enumerate
insert
\end_layout

\begin_layout Enumerate
search
\end_layout

\begin_layout Enumerate
inorder traversal
\end_layout

\begin_layout Enumerate
print level by level
\end_layout

\begin_layout Enumerate
copy/move constructor
\end_layout

\begin_layout Enumerate
copy/move operator
\end_layout

\begin_layout Enumerate
output operator
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Analyze the algorithms according to assignment requirements.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Double Linked List:
\end_layout

\begin_deeper
\begin_layout Enumerate
delete tree O(
\end_layout

\begin_layout Enumerate
insert O(log(n)): insert a node into the tree by comparing the value, create
 a new node, change the pointer of parent node to the node inderted.
\end_layout

\begin_layout Enumerate
search O(log(n)): 
\end_layout

\begin_deeper
\begin_layout Enumerate
O(n) for worst case(linear tree)
\end_layout

\begin_layout Enumerate
O(log(n)) for best case(perfect tree)
\end_layout

\end_deeper
\begin_layout Enumerate
inorder traversal
\end_layout

\begin_layout Enumerate
print level by level
\end_layout

\begin_layout Enumerate
copy/move constructor O(n): this function will copy every element in another
 list
\end_layout

\begin_layout Enumerate
copy/move assignment O(n): the function will clear the linked lisit first(O(n)).
 Then copy the whole list from the other list (O(n)).
 O(n) + O(n) = O(n)
\end_layout

\begin_layout Enumerate
output operator O(n): this function will print out every nodes content in
 the linked list
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Enumerate
A description of the implementation of (a) individual search cost and (b)
 average search cost.
 Analyze the time complexity of the functions that (a) calculatie the individual
 search cost and (b) sum up the search costs over all the nodes
\end_layout

\begin_deeper
\begin_layout Enumerate
individual search cost
\end_layout

\begin_deeper
\begin_layout Enumerate
Implementation: The indivisual search cost of each node was calculated in
 the insert_node function.
 Insert+node is implemented by recursion.
 If the function does not find the right place to enter the node it calls
 itself either its left or right child.
 Every time it is called the function, it will keep stracking of the previous
 nodes search time.
 
\end_layout

\begin_layout Enumerate
Time complexity: The time complexity of calculating the individual search
 time would be O(log(n)) where the n is the number of nodes in the tree
 at that point.
 This is because, on average, about half of the nodes will be visited for
 a node to be inserted into the tree and since the search time is calculated
 during insertion, it will have the same big-o as the insertion funciton.
\end_layout

\end_deeper
\begin_layout Enumerate
average search cost
\end_layout

\begin_deeper
\begin_layout Enumerate
Implementation: The average search time has two part.
 The size and the total search time of the tree.
 To calculate the size, the size will plus 1 everytime a node was inserted.
 The total search time is calculated in the inorder function.
 Every time it output a node, it also access the nodes search time.
 We have a private function called get_total_Search_time which allowed us
 to get the total search time of all nodes.
 Then we can use it divided by the size.
\end_layout

\end_deeper
\begin_layout Enumerate
Upadated search time
\end_layout

\begin_deeper
\begin_layout Enumerate
The time complexity of updating the search time would be O(log(n)) where
 n is the number of nodes in the tree at that point.
 This is about hald of the nodes have to be visited for a node to be (inserted/
 deleted) to/from teh tree.
\end_layout

\end_deeper
\begin_layout Enumerate
sum up the search cost overall
\end_layout

\begin_deeper
\begin_layout Enumerate
Time complexity: O(n) where n is the number of nodes in the tree at taht
 point.
 Every nodes must be visited inorder to sum up all search time.
\end_layout

\end_deeper
\begin_layout Enumerate
If we let be the infividual search time of each node of a ninary tree, then
 the best and average case for a binary tree would be O(log(n)).
 These cases are teh results from a perfect tree or random binary tree.
 The worst case for a binary tree would be O(n), which comes with a linear
 tree.
 For the perfect tree and random tree, the height is log(n), on each level
 there are 2^k nodes, and the total search time is (log1+1)+2(log2+1)+2^2(log3+1
)+...+2^(log(n+1))-1(log(n)+1)=(n+1)log(n+1)-n.
 This means that the average time is O(log(n)).
 For the linear tree, the height is n-1 and the total search time is n(n+1)/2.
 Dividing these we have (n+2)/2 which is O(n).
\end_layout

\end_deeper
\begin_layout Enumerate
Give an individual search cost in terms of n using big-O notation.
 Analyze and give the average search costs of a perfect binary tree and
 a linear binary tree using big-O notation, assuming that the following
 formulas are true (n denotes the total number of input data).
 To be clear, part 3 asks you to analyze the running time of the functions
 implemented to compute the individual and average search cost, while here
 you must analyze the asymptotic behavior of the values of the total and
 average search cost itself.
\end_layout

\begin_deeper
\begin_layout Enumerate

\end_layout

\end_deeper
\begin_layout Enumerate
C++ organization and implementation of the problem solution 
\end_layout

\begin_deeper
\begin_layout Enumerate
Provide a list and description of classes or interfaces used by a program
 such as classes used to implement the data structures or exceptions.
\begin_inset listings
lstparams "language={C++},basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

struct Node {   
\end_layout

\begin_layout Plain Layout

	int value;   
\end_layout

\begin_layout Plain Layout

	Node* left;   
\end_layout

\begin_layout Plain Layout

	Node* right;   
\end_layout

\begin_layout Plain Layout

	int search_time; //see the problem description
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// Node constructor   
\end_layout

\begin_layout Plain Layout

	Node(int val = 0,Node* l = nullptr,Node* r = nullptr):value(val), 		
\end_layout

\begin_layout Plain Layout

	left(l), right(r), search_time(0) {} 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language={C++},basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

struct BSTree { 
\end_layout

\begin_layout Plain Layout

public:  
\end_layout

\begin_layout Plain Layout

// constructor
\end_layout

\begin_layout Plain Layout

BSTree():size(0),root(nullptr){};  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//copy constructor
\end_layout

\begin_layout Plain Layout

BSTree(const BSTree& other); 
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

// move constructor   
\end_layout

\begin_layout Plain Layout

BSTree(BSTree&& other);   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// copy assignment   
\end_layout

\begin_layout Plain Layout

BSTree& operator=(const BSTree& other);  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// move assignment   
\end_layout

\begin_layout Plain Layout

BSTree& operator=(BSTree&& other);   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//destructor
\end_layout

\begin_layout Plain Layout

~BSTree();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const Node* get_root() const { return root; }   
\end_layout

\begin_layout Plain Layout

const int get_size() const { return size; }   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// insert a node.
 with helper function
\end_layout

\begin_layout Plain Layout

Node* insert(int obj);   
\end_layout

\begin_layout Plain Layout

Node* insert_helper(int obj, Node*&node, int st);   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// search a node with a value, return the opinter.
 with helper function
\end_layout

\begin_layout Plain Layout

Node* search(int obj);   
\end_layout

\begin_layout Plain Layout

Node* search_helper(int obj, Node* node);   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// update the search time for every node, get average search time of a tree.
 with helper function
\end_layout

\begin_layout Plain Layout

void update_search_times();   
\end_layout

\begin_layout Plain Layout

void update_st_helper(Node* node, int st);
\end_layout

\begin_layout Plain Layout

float get_average_search_time(); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// inorder traversal.
 with helper function
\end_layout

\begin_layout Plain Layout

void inorder(std::ostream& out);   
\end_layout

\begin_layout Plain Layout

void inorder_helper(Node* node, std::ostream& out);   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//void print_tree(std::ostream &out, Node* node); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// print a tree by level by level.
 with helper function print_node for print each node out
\end_layout

\begin_layout Plain Layout

void print_node(std::ostream &out, Node* node);   
\end_layout

\begin_layout Plain Layout

void print_level_by_level(std::ostream& out);
\end_layout

\begin_layout Plain Layout

// helper function for get the height of tree
\end_layout

\begin_layout Plain Layout

int getHeight() {return (root == NULL) ? 0 : this->height(root);};   
\end_layout

\begin_layout Plain Layout

int height(Node* t);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private:   
\end_layout

\begin_layout Plain Layout

int size;   
\end_layout

\begin_layout Plain Layout

Node* root;   
\end_layout

\begin_layout Plain Layout

 int get_total_search_time(Node* node);
\end_layout

\begin_layout Plain Layout

// you can add recursive helper functions to help you 
\end_layout

\begin_layout Plain Layout

// this is one is implemented for you:   
\end_layout

\begin_layout Plain Layout

void copy_helper(Node*& newNode, 
\end_layout

\begin_layout Plain Layout

const Node* sourceNode);   
\end_layout

\begin_layout Plain Layout

void deleteTree(Node* root); 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Include in the report the class declarations from a header file (.h) and
 their implementation from a source file (.cpp).
 
\end_layout

\begin_deeper
\begin_layout Enumerate
See the mimir submission.
\end_layout

\end_deeper
\begin_layout Enumerate
Provide features of the C++ programming paradigms like Inheritance or Polymorphi
sm in case of object oriented programming, or Templates in the case of generic
 programming used in your implementation.
\end_layout

\begin_layout Enumerate
\begin_inset Graphics
	filename /Users/abby/Desktop/Screen Shot 2020-10-20 at 5.05.14 PM.png
	scale 20

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Graphics
	filename /Users/abby/Desktop/Screen Shot 2020-10-20 at 5.05.28 PM.png
	scale 20

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Graphics
	filename /Users/abby/Desktop/Screen Shot 2020-10-20 at 5.05.41 PM.png
	scale 20

\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
A user guide description how to navigate your program with the instructions
 how to: 
\end_layout

\begin_deeper
\begin_layout Enumerate
compile the program: specify the directory and file names, etc.
\begin_inset listings
lstparams "language=make,basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

all: run-trees
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

run-trees: BSTree.o BSTree_main.o 	
\end_layout

\begin_layout Plain Layout

	c++ -g -std=c++11 BSTree.o BSTree_main.o -o run-trees
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BSTree.o: BSTree.cpp BSTree.h 	
\end_layout

\begin_layout Plain Layout

	c++ -g -std=c++11 -c BSTree.cpp
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BSTree_main.o: BSTree_main.cpp BSTree.h 	
\end_layout

\begin_layout Plain Layout

	c++ -g -std=c++11 -c BSTree_main.cpp
\end_layout

\begin_layout Plain Layout

clean: 	
\end_layout

\begin_layout Plain Layout

	rm *.o run-trees
\end_layout

\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Enumerate
run the program: specify the name of an executable file.
 
\begin_inset listings
lstparams "language=make,basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

» cd ./PA_3/part1/  
\end_layout

\begin_layout Plain Layout

» make clean 
\end_layout

\begin_layout Plain Layout

» make
\end_layout

\begin_layout Plain Layout

» ./run-trees
\end_layout

\end_inset


\begin_inset VSpace vfill
\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Specifications and description of input and output formats and files 
\end_layout

\begin_deeper
\begin_layout Enumerate
The type of files: keyboard, text files, etc (if applicable).
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Input file: a list of the value of each nodes in a file
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
A file input format: when a program requires a sequence of input items,
 specify the number of items per line or a line termination.
 Provide a sample of a required input format.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Input file: input file should be an .txt file which have the format like
 this:
\end_layout

\begin_deeper
\begin_layout Enumerate
Test file for 
\begin_inset Quotes eld
\end_inset

4p
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

8 
\end_layout

\begin_layout Plain Layout

12 
\end_layout

\begin_layout Plain Layout

14 
\end_layout

\begin_layout Plain Layout

15 
\end_layout

\begin_layout Plain Layout

13 
\end_layout

\begin_layout Plain Layout

10 
\end_layout

\begin_layout Plain Layout

11 
\end_layout

\begin_layout Plain Layout

9 
\end_layout

\begin_layout Plain Layout

4 
\end_layout

\begin_layout Plain Layout

6 
\end_layout

\begin_layout Plain Layout

7 
\end_layout

\begin_layout Plain Layout

5 
\end_layout

\begin_layout Plain Layout

2 
\end_layout

\begin_layout Plain Layout

3 
\end_layout

\begin_layout Plain Layout

1
\end_layout

\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Discuss possible cases when your program could crash because of incorrect
 input (a wrong file name, strings instead of a number, or such cases when
 the program expects 10 items to read and it finds only 9.)
\end_layout

\begin_deeper
\begin_layout Enumerate
none.
\end_layout

\begin_layout Enumerate
no special case.
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Provide types of exceptions and their purpose in your program.
\end_layout

\begin_deeper
\begin_layout Enumerate
logical exceptions (such as deletion of an item from an empty container,
 etc.).
\end_layout

\begin_deeper
\begin_layout Enumerate
No logical error has been found in testing
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
runtime exception (such as division by 
\begin_inset Formula $0$
\end_inset

, etc.)
\end_layout

\begin_deeper
\begin_layout Enumerate
Empty tree will be excuted in a different way
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Test your program for correctness using valid, invalid, and random inputs
 (e.g., insertion of an item at the beginning, at the end, or at a random
 place into a sorted vector).
 Include evidence of your testing, such as an output file or screen shots
 with an input and the corresponding output
\end_layout

\begin_deeper
\begin_layout Enumerate
no implementation of invalid input.
\end_layout

\begin_layout Enumerate
All tests passes.
\begin_inset VSpace vfill
\end_inset


\end_layout

\end_deeper
\end_body
\end_document
